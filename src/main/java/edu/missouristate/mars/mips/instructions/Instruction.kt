/*
 * Copyright (c) 2003-2024, Pete Sanderson and Kenneth Vollmar
 * Copyright (c) 2024-present, Nicholas Hubbard
 *
 * Originally developed by Pete Sanderson (psanderson@otterbein.edu) and Kenneth Vollmar (kenvollmar@missouristate.edu)
 * Maintained by Nicholas Hubbard (nhubbard@users.noreply.github.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be included in all copies or substantial portions of
 *    the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package edu.missouristate.mars.mips.instructions

import edu.missouristate.mars.ProcessingException
import edu.missouristate.mars.assembler.TokenList
import edu.missouristate.mars.assembler.Tokenizer
import java.util.StringTokenizer

/**
 * A base class to represent a member of the MIPS instruction set.
 */
abstract class Instruction {
    companion object {
        /**
         * The length in bytes of a machine instruction.
         * MIPS is a RISC architecture, so all instructions are the same length.
         */
        const val INSTRUCTION_LENGTH = 4
        const val INSTRUCTION_LENGTH_BITS = 12

        /**
         * Characters used in the instruction mask to indicate bit positions for 'f'irst, 's'econd, and 't'hird operands.
         */
        @JvmStatic val operandMask = charArrayOf('f', 's', 't')
    }

    /** The instruction name. */
    abstract var name: String

    /** An example of how to use this instruction. Provided as a subclass constructor argument. */
    abstract var exampleFormat: String

    /** A description of the instruction to show users. */
    abstract var description: String

    /** A list of tokens generated by tokenizing example usage (see [exampleFormat]). */
    lateinit var tokenList: TokenList

    /** The length in bytes that this instruction requires in its binary form. Defaults to 4. */
    open val instructionLength = INSTRUCTION_LENGTH

    /** Used by subclass constructors to extract operator mnemonics from the instruction example. */
    protected fun extractOperator(example: String): String {
        val st = StringTokenizer(example, " ,\t")
        return st.nextToken()
    }

    /**
     * Build a token list from the example instruction provided as a constructor argument.
     * Parser uses this for syntax checking.
     */
    fun createExampleTokenList() {
        try {
            tokenList = Tokenizer().tokenizeExampleInstruction(exampleFormat)
        } catch (pe: ProcessingException) {
            println("Configuration error: Instruction example \"$exampleFormat\" contains invalid token(s)!")
        }
    }
}